
%{

#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <map>

#define YYDEBUG 1

using namespace std;

extern int yylex();
void yyerror(string msg) {
	cerr << msg << endl;
	exit(EXIT_FAILURE);
}

#include "angle.hpp"
#include "parser.tab.hpp"

map< string, Angle > id_table;
map< string, vector<Angle>* > list_id_table;

%}

%union {
	int num;
	Angle* angle;
	string* id;
	vector<Angle>* angles;
}

%token Print
%token <num> Num
%token <id> AngleId ListId

%type <angle> AngleExp Angle
%type <angles> Angles AngleList

%left '+' '-'
%left '*'

%start Prog
%%

Prog : Prog Line ';'
| Line ';'
Line : Print '(' AngleExp ')' {
	$3->print();
	cout << endl;
}
| Print '(' ListId ')' {
	cout << '[';
	int n = list_id_table[*$3]->size();
	for(int i = 0; i < n-1; i += 1) {
		(*list_id_table[*$3])[i].print();
		cout << ", ";
	}
	(*list_id_table[*$3])[n-1].print();
	cout << ']' << endl;
}	
		
| AngleId '=' AngleExp {
	id_table[*$1] = *$3;
	delete $1;
	delete $3;
}
| ListId '=' AngleList {
	list_id_table[*$1] = $3;
	delete $1;
}
| AngleExp {
	$1->print();
}
;
AngleExp : AngleExp '+' AngleExp {
	$$ = $1->sum($3);
	delete $1;
	delete $3;
}
| AngleExp '-' AngleExp { 
	$$ = $1->sub($3);
	delete $1;
	delete $3;
}
| Num '*' AngleExp {
	$$ = $3->mul($1);
	delete $3;
}
| AngleExp '*' Num {
	$$ = $1->mul($3);
	delete $1;
}
| '(' AngleExp ')' {
	$$ = $2;
}
| ListId '[' Num ']' {
	$$ = new Angle((*list_id_table[*$1])[$3]);
}
| Angle {
	$$ = $1;
}
| AngleId {
	$$ = new Angle(id_table[*$1]);
}
; 
AngleList : '[' Angles ']' {
	$$ = $2;
}
;
Angles : Angles ',' AngleExp {
	$$ = $1;
	$$->push_back(*$3);
	delete $3;
}	
| AngleExp {
	$$ = new vector<Angle>();
	$$->push_back(*$1);
	delete $1;
}
;
Angle : '<' Num ',' Num ',' Num '>' {
	
	$$ = new Angle($2, $4, $6);
}
;

%%

int main() {
	
//	yydebug = 1;
	yyparse();
	return 0;
}
